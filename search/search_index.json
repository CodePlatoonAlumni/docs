{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Working with these docs Local Dev If you are wanting to add to the docs and want to run a server locally, this is setup with docker to make that easy. If you don't have Docker Desktop installed, install it from here . Once you have docker, run the following: make docs_build and then make docs_run . If you want to know what those commands do, just look for those keys in the Makefile. Releasing To release the updated docs to the hosted site just merge a branch to main. This will trigger a github action that will do the deploy. Misc mkdocs.yml Docs Folder Docs auto deploy on master merge Dockerfile Makefile Source Code","title":"Home"},{"location":"#working-with-these-docs","text":"","title":"Working with these docs"},{"location":"#local-dev","text":"If you are wanting to add to the docs and want to run a server locally, this is setup with docker to make that easy. If you don't have Docker Desktop installed, install it from here . Once you have docker, run the following: make docs_build and then make docs_run . If you want to know what those commands do, just look for those keys in the Makefile.","title":"Local Dev"},{"location":"#releasing","text":"To release the updated docs to the hosted site just merge a branch to main. This will trigger a github action that will do the deploy.","title":"Releasing"},{"location":"#misc","text":"mkdocs.yml Docs Folder Docs auto deploy on master merge Dockerfile Makefile Source Code","title":"Misc"},{"location":"alumni_app/","text":"Alumni You can find the project source code here Project Structure ../alumni-app-fe \u251c\u2500\u2500 README.md \u251c\u2500\u2500 amplify \u2502 \u251c\u2500\u2500 backend \u2502 \u2502 \u251c\u2500\u2500 auth \u2502 \u2502 \u2502 \u251c\u2500\u2500 alumniapp \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 alumniapp-cloudformation-template.yml \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 parameters.json \u2502 \u2502 \u2502 \u2514\u2500\u2500 userPoolGroups \u2502 \u2502 \u2502 \u251c\u2500\u2500 parameters.json \u2502 \u2502 \u2502 \u251c\u2500\u2500 template.json \u2502 \u2502 \u2502 \u2514\u2500\u2500 user-pool-group-precedence.json \u2502 \u2502 \u251c\u2500\u2500 backend-config.json \u2502 \u2502 \u2514\u2500\u2500 tags.json \u2502 \u251c\u2500\u2500 cli.json \u2502 \u2514\u2500\u2500 team-provider-info.json \u251c\u2500\u2500 package-lock.json \u251c\u2500\u2500 package.json \u251c\u2500\u2500 public \u2502 \u251c\u2500\u2500 favicon.ico \u2502 \u251c\u2500\u2500 index.html \u2502 \u251c\u2500\u2500 logo192.png \u2502 \u251c\u2500\u2500 logo512.png \u2502 \u251c\u2500\u2500 manifest.json \u2502 \u2514\u2500\u2500 robots.txt \u2514\u2500\u2500 src \u251c\u2500\u2500 App.css \u251c\u2500\u2500 App.js \u251c\u2500\u2500 App.test.js \u251c\u2500\u2500 index.css \u251c\u2500\u2500 index.js \u251c\u2500\u2500 reportWebVitals.js \u2514\u2500\u2500 setupTests.js 7 directories, 25 files","title":"Intro"},{"location":"alumni_app/#alumni","text":"You can find the project source code here","title":"Alumni"},{"location":"alumni_app/#project-structure","text":"../alumni-app-fe \u251c\u2500\u2500 README.md \u251c\u2500\u2500 amplify \u2502 \u251c\u2500\u2500 backend \u2502 \u2502 \u251c\u2500\u2500 auth \u2502 \u2502 \u2502 \u251c\u2500\u2500 alumniapp \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 alumniapp-cloudformation-template.yml \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 parameters.json \u2502 \u2502 \u2502 \u2514\u2500\u2500 userPoolGroups \u2502 \u2502 \u2502 \u251c\u2500\u2500 parameters.json \u2502 \u2502 \u2502 \u251c\u2500\u2500 template.json \u2502 \u2502 \u2502 \u2514\u2500\u2500 user-pool-group-precedence.json \u2502 \u2502 \u251c\u2500\u2500 backend-config.json \u2502 \u2502 \u2514\u2500\u2500 tags.json \u2502 \u251c\u2500\u2500 cli.json \u2502 \u2514\u2500\u2500 team-provider-info.json \u251c\u2500\u2500 package-lock.json \u251c\u2500\u2500 package.json \u251c\u2500\u2500 public \u2502 \u251c\u2500\u2500 favicon.ico \u2502 \u251c\u2500\u2500 index.html \u2502 \u251c\u2500\u2500 logo192.png \u2502 \u251c\u2500\u2500 logo512.png \u2502 \u251c\u2500\u2500 manifest.json \u2502 \u2514\u2500\u2500 robots.txt \u2514\u2500\u2500 src \u251c\u2500\u2500 App.css \u251c\u2500\u2500 App.js \u251c\u2500\u2500 App.test.js \u251c\u2500\u2500 index.css \u251c\u2500\u2500 index.js \u251c\u2500\u2500 reportWebVitals.js \u2514\u2500\u2500 setupTests.js 7 directories, 25 files","title":"Project Structure"},{"location":"alumni_app/design_docs/","text":"Design Docs Milestones Lead Overview","title":"Design Docs"},{"location":"alumni_app/design_docs/#design-docs","text":"Milestones Lead Overview","title":"Design Docs"},{"location":"alumni_app/release/","text":"Release Process The Alumni app has 3 environments: dev/staging/main. All feature PRs should be opened against dev. When dev is stable, a pr should be opened from dev to staging. Finally, once staging is ready a PR should be opened from staging to main. Just merging a PR against the above named branches will trigger a FE/BE release. You can view the progress of those events in the Amplify console. If there is a conflict from dev to staging, follow the steps below. Create a branch off of dev. e.g. git checkout -b staging-conflict-fix Run git merge staging Resolve conflicts Open a PR against dev and merge. e.g. dev <- staging-conflict-fix Open a PR from dev to staging: staging <- dev. There should be no more conflicts.","title":"Release Process"},{"location":"alumni_app/release/#release-process","text":"The Alumni app has 3 environments: dev/staging/main. All feature PRs should be opened against dev. When dev is stable, a pr should be opened from dev to staging. Finally, once staging is ready a PR should be opened from staging to main. Just merging a PR against the above named branches will trigger a FE/BE release. You can view the progress of those events in the Amplify console. If there is a conflict from dev to staging, follow the steps below. Create a branch off of dev. e.g. git checkout -b staging-conflict-fix Run git merge staging Resolve conflicts Open a PR against dev and merge. e.g. dev <- staging-conflict-fix Open a PR from dev to staging: staging <- dev. There should be no more conflicts.","title":"Release Process"},{"location":"alumni_app/setup/","text":"Application Setup Frontend The frontend portion of this app is built in react. If you do not need to interact with the DB, then this section is all you will need for setup. This project was bootstrapped with Create React App . npm start Runs the app in the development mode. Open http://localhost:3000 to view it in the browser. ESLint Something to note is the app will not compile if there are lint errors. Useful VSCode extensions prettier code formatter ESLint Backend The backend portion is built using AWS Amplify Framework . Go here for setting up amplify.","title":"Local Setup"},{"location":"alumni_app/setup/#application-setup","text":"","title":"Application Setup"},{"location":"alumni_app/setup/#frontend","text":"The frontend portion of this app is built in react. If you do not need to interact with the DB, then this section is all you will need for setup. This project was bootstrapped with Create React App .","title":"Frontend"},{"location":"alumni_app/setup/#npm-start","text":"Runs the app in the development mode. Open http://localhost:3000 to view it in the browser.","title":"npm start"},{"location":"alumni_app/setup/#eslint","text":"Something to note is the app will not compile if there are lint errors.","title":"ESLint"},{"location":"alumni_app/setup/#useful-vscode-extensions","text":"prettier code formatter ESLint","title":"Useful VSCode extensions"},{"location":"alumni_app/setup/#backend","text":"The backend portion is built using AWS Amplify Framework . Go here for setting up amplify.","title":"Backend"},{"location":"amplify/","text":"Working with Amplify Set up AWS Profile Create the below two files to store your credentials and config. 1. ~/.aws/credentials (just replace the example keys with your keys) [ default ] aws_access_key_id = SOMEKEY aws_secret_access_key = SOMESECRET 2. ~/.aws/config [ default ] region = us-east-2 output = json You can learn more about AWS profile here . Set up Amplify environment Run npm install -g @aws-amplify/cli to install amplify CLI From the project directory, run amplify init Do you want to use an existing environment? Yes Choose the environment you would like to use: Select develop Learn more Amplify CLI Commands Some amplify commands operate like git commands. Below commands are useful whether you work on backend or not. amplify status is like git status and displays the changes between your local backend environment and upstream environment. It also tells you which environment you are currently on. amplify pull is like git pull and fetches upstream backend environment definition changes from the cloud and updates the local environment to match that definition. amplify push pretty much the opposite of the above. View more amplify environment add <env_name> this will add a new backend environment. If you are wanting to do backend changes and don't want to mess up the dev environment, you can use this to create your own personal sandbox. You would then checkout that env. amplify env checkout <env_name> see above. Will checkout to a new backend_env View more Amplify Docs Client Libraries (Used in frontend) CLI GraphQL API S3 Storage Lambda Function Authentication","title":"Intro"},{"location":"amplify/#working-with-amplify","text":"","title":"Working with Amplify"},{"location":"amplify/#set-up-aws-profile","text":"Create the below two files to store your credentials and config. 1. ~/.aws/credentials (just replace the example keys with your keys) [ default ] aws_access_key_id = SOMEKEY aws_secret_access_key = SOMESECRET 2. ~/.aws/config [ default ] region = us-east-2 output = json You can learn more about AWS profile here .","title":"Set up AWS Profile"},{"location":"amplify/#set-up-amplify-environment","text":"Run npm install -g @aws-amplify/cli to install amplify CLI From the project directory, run amplify init Do you want to use an existing environment? Yes Choose the environment you would like to use: Select develop Learn more","title":"Set up Amplify environment"},{"location":"amplify/#amplify-cli-commands","text":"Some amplify commands operate like git commands. Below commands are useful whether you work on backend or not. amplify status is like git status and displays the changes between your local backend environment and upstream environment. It also tells you which environment you are currently on. amplify pull is like git pull and fetches upstream backend environment definition changes from the cloud and updates the local environment to match that definition. amplify push pretty much the opposite of the above. View more amplify environment add <env_name> this will add a new backend environment. If you are wanting to do backend changes and don't want to mess up the dev environment, you can use this to create your own personal sandbox. You would then checkout that env. amplify env checkout <env_name> see above. Will checkout to a new backend_env View more","title":"Amplify CLI Commands"},{"location":"amplify/#amplify-docs","text":"","title":"Amplify Docs"},{"location":"amplify/#client-libraries-used-in-frontend","text":"","title":"Client Libraries (Used in frontend)"},{"location":"amplify/#cli","text":"GraphQL API S3 Storage Lambda Function Authentication","title":"CLI"},{"location":"amplify/graphql/","text":"GraphQL API Amplify CLI generates resolvers for queries, mutations, and subscriptions as well as DynamoDB tables for models defined in schema.graphql . Helpful links: Apmlify GraphQL CLI Docs Amplify GraphQL Library Docs Model Models are defined in schema.graphql . Index With @key directive, we can create custom indexes and additional data access patterns. This allows us to efficiently query data as DynamoDB is a key-value and document database (NoSQL). Learn more Sparse Index We utilize sparse index approach with some of our indexes. Sparse indexes let us query faster and less expensive than to scan the entire table. To make this happen, we only assign values to the key if the condition is met. For example, we have the following index. @key(fields: [\"publicProfile\", \"firstName\"], name: \"publicAlumniProfiles\", queryField: \"publicAlumniProfiles\") Only public profiles should have publicProfile attributes. If the profile is changed to non-public, we delete the attribute, so if you try to access publicProfile on non-public profiles, you will get null . Sparse index is one of the best practices when working with DynamoDB. Learn More Best Practices for DynamoDB How to query data Amplify generates queries, mutations, and subscriptions files in src/graphql/ . We can use these to query and mutate data from frontend. You can find examples on how to use them throughout our code as well as in the official docs . The generated files get overwritten, so we have src/graphql/custom folder where we have custom queries. These are used in cases where we only need specific attributes returned or set query criteria directly instead of passing in as an argument to make them consice.","title":"GraphQL"},{"location":"amplify/graphql/#graphql-api","text":"Amplify CLI generates resolvers for queries, mutations, and subscriptions as well as DynamoDB tables for models defined in schema.graphql . Helpful links: Apmlify GraphQL CLI Docs Amplify GraphQL Library Docs","title":"GraphQL API"},{"location":"amplify/graphql/#model","text":"Models are defined in schema.graphql .","title":"Model"},{"location":"amplify/graphql/#index","text":"With @key directive, we can create custom indexes and additional data access patterns. This allows us to efficiently query data as DynamoDB is a key-value and document database (NoSQL). Learn more","title":"Index"},{"location":"amplify/graphql/#sparse-index","text":"We utilize sparse index approach with some of our indexes. Sparse indexes let us query faster and less expensive than to scan the entire table. To make this happen, we only assign values to the key if the condition is met. For example, we have the following index. @key(fields: [\"publicProfile\", \"firstName\"], name: \"publicAlumniProfiles\", queryField: \"publicAlumniProfiles\") Only public profiles should have publicProfile attributes. If the profile is changed to non-public, we delete the attribute, so if you try to access publicProfile on non-public profiles, you will get null . Sparse index is one of the best practices when working with DynamoDB. Learn More Best Practices for DynamoDB","title":"Sparse Index"},{"location":"amplify/graphql/#how-to-query-data","text":"Amplify generates queries, mutations, and subscriptions files in src/graphql/ . We can use these to query and mutate data from frontend. You can find examples on how to use them throughout our code as well as in the official docs . The generated files get overwritten, so we have src/graphql/custom folder where we have custom queries. These are used in cases where we only need specific attributes returned or set query criteria directly instead of passing in as an argument to make them consice.","title":"How to query data"}]}